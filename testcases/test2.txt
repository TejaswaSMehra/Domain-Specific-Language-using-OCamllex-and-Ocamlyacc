(* Test file for lexer *)

(* Identifiers and basic keywords *)
x := 42;  (* Assignment with integer *)
y := 3.14;  (* Assignment with float *)
z := true;  (* Assignment with boolean *)
Print(x);  (* Print statement *)

(* Floats and edge cases *)
a := 1.0;  (* Simple float *)
b := 1.0e-10;  (* Small scientific notation float *)
c := 1.7976931348623157e+308;  (* Max float (edge case for OCaml float) *)
d := -1.0;  (* Negative float *)

(* Integers and edge cases *)
e := 2147483647;  (* Max 32-bit integer *)
f := -2147483648;  (* Min 32-bit integer *)


(* Operations *)
g := a + b;  (* Float addition *)
h := e * f;  (* Integer multiplication *)

(* Vectors and matrices *)
vec1 := 3
[1.0,2.0,3.0];  (* Float vector *)
vec2 := 3
[1.0,2.0,3.0];  (* Int vector *)
mat1 := 2,2
[[1.0,2.0];[3.0,4.0]];  (* Float matrix *)
mat2 := 2,2
[[1,2];[3,4]];  (* Int matrix *)

(* Vector operations *)
dot_product := vec1 . vec2;
angle_between := angle vec1 vec2;

(* Matrix operations *)
transpose_mat := transpose (mat1);
determinant2 := determinant (mat2);

Print(g);  (* Print float addition result *)
Print(h);  (* Print integer multiplication result *)
Print(dot_product);  (* Print dot product result *)
Print(angle_between);  (* Print angle between vectors *)
Print(transpose_mat);  (* Print transposed matrix *)
Print(determinant2);  (* Print determinant result *)

(* End of input *)
